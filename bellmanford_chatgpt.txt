#include <stdio.h>

#define MAX_NODES 100
#define INF 9999

// Function to add an edge to the graph
void addEdge(int u, int v, int weight, int adjMatrix[MAX_NODES][MAX_NODES])
{
    adjMatrix[u][v] = weight;
}

// Function to display the adjacency matrix
void displayMatrix(int nodes, int adjMatrix[MAX_NODES][MAX_NODES])
{
    int i, j;
    printf("Adjacency Matrix:\n");
    for (i = 0; i < nodes; i++)
    {
        for (j = 0; j < nodes; j++)
        {
            if (adjMatrix[i][j] == INF)
                printf("%5c", 236);
            else
                printf("%5d", adjMatrix[i][j]);
        }
        printf("\n");
    }
}

// Function to perform Bellman-Ford algorithm
void bellmanFord(int nodes, int edges, int src, int adjMatrix[MAX_NODES][MAX_NODES])
{
    int dist[MAX_NODES], i, j, u, v, weight;

    // Initialize distances from src to all other vertices as INFINITE
    for (i = 0; i < nodes; i++)
        dist[i] = INF;
    dist[src] = 0;

    // Relax all edges nodes-1 times
    for (i = 0; i < nodes - 1; i++)
    {
        for (u = 0; u < nodes; u++)
        {
            for (v = 0; v < nodes; v++)
            {
                if (adjMatrix[u][v] != INF)
                {
                    weight = adjMatrix[u][v];
                    if (dist[u] != INF && dist[u] + weight < dist[v])
                        dist[v] = dist[u] + weight;
                }
            }
        }
    }

    // Check for negative-weight cycles
    for (u = 0; u < nodes; u++)
    {
        for (v = 0; v < nodes; v++)
        {
            if (adjMatrix[u][v] != INF)
            {
                weight = adjMatrix[u][v];
                if (dist[u] != INF && dist[u] + weight < dist[v])
                {
                    printf("Graph contains negative weight cycle\n");
                    return;
                }
            }
        }
    }

    // Print the distance array
    printf("Vertex   Distance from source vertex %d\n", src + 1);
    for (i = 0; i < nodes; i++)
    {
        printf("%d \t\t ", i + 1);
        if (dist[i] == INF)
            printf("%c\n", 236);
        else
            printf("%d\n", dist[i]);
    }
}

int main()
{
    int nodes, edges, weight, u, v, i, j;
    int adjMatrix[MAX_NODES][MAX_NODES];

    for (i = 0; i < MAX_NODES; i++)
    {
        for (j = 0; j < MAX_NODES; j++)
            adjMatrix[i][j] = INF;
    }

    printf("Enter number of nodes in the graph: ");
    scanf("%d", &nodes);

    printf("Enter number of edges in the graph: ");
    scanf("%d", &edges);

    printf("Enter the edges (format: from_node to_node weight): \n");
    for (i = 0; i < edges; i++)
    {
        scanf("%d %d %d", &u, &v, &weight);
        addEdge(u - 1, v - 1, weight, adjMatrix);
    }

    displayMatrix(nodes, adjMatrix);

    printf("Enter the source vertex: ");
    scanf("%d", &u);

    bellmanFord(nodes, edges, u - 1, adjMatrix);

    return 0;
}
Enter number of nodes in the graph: 6
Enter number of edges in the graph: 8
Enter the edges (format: from_node to_node weight): 
1 2 5
1 3 7
2 3 3
2 4 4
2 5 6
4 5 -1
4 6 2
5 6 -3
Adjacency Matrix:
         5    7               
              3    4    6     
                              
                       -1    2
                            -3
                              
Enter the source vertex: 1
Vertex   Distance from source vertex 1
1 		 0
2 		 5
3 		 7
4 		 9
5 		 8
6 		 5


=== Code Execution Successful ===